// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;

using ceat.Sources.Models;
using ceat.Sources.Services;
using ceat.Sources.ViewControllers.HomeScreen.LoadedData;
using ceat.Sources.ViewControllers.ModelsComparingScreen;
using ceat.Sources.ViewControllers.CauseEffectMatrixScreen;

namespace ceat.Sources.ViewControllers.HomeScreen
{
    public partial class HomeScreenViewController : NSViewController
    {
        // FIXME: Should be initialized at the `ViewController` entry-point
        public readonly FileManagerWrapper FileManager = new FileManagerWrapper(new NSFileManager());
        public readonly AlgorithmService algorithmService = new AlgorithmService();

        WorkMode ApplicationWorkMode;
        NSWindowController ModelsComparingWindowController;
        NSWindowController CauseEffectMatrixWindowController;

        #region View Controller Life Cycle

        HomeScreenViewController(IntPtr handle) : base(handle) { }
        public override void ViewDidLoad() { base.ViewDidLoad(); }

        #endregion View Controller Life Cycle


        #region Xamarin.Mac Partial Methods

        partial void LoadDataClicked(NSButton sender)
        {
            var panel = new NSOpenPanel
            {
                CanChooseFiles = false,
                CanChooseDirectories = true,
                AllowsMultipleSelection = true
            };

            panel.BeginSheet(View.Window, (result) =>
            {
                if (result == 0 || panel.Url == null) return; // 0: pressed `Cancel`
                var dataSource = new LoadedDataOutlineDataSource(
                    new RootDirectory(
                        panel.Url.Path,
                        FileManager
                    )
                );
                var outlineViewDelegate = new LoadedDataOutlineDelegate(dataSource);

                LoadedDataOutlineView.DataSource = dataSource;
                LoadedDataOutlineView.Delegate = outlineViewDelegate;
                ProcessDataButton.Enabled = true;
            });
        }

        partial void ProcessDataClicked(NSButton sender)
        {
            var unexplainedVarianceProportionMatrix = new UnexplainedVarianceProportionMatrix(
                new UnexplainedVarianceProportionList(
                    ((LoadedDataOutlineDataSource)LoadedDataOutlineView.DataSource).RootDataDir.Directories
                ),
                ((LoadedDataOutlineDataSource)LoadedDataOutlineView.DataSource).RootDataDir.Directories.Count
            );

            var causalRelationshipMatrix = new CausalRelationshipMatrix(
                unexplainedVarianceProportionMatrix,
                algorithmService
            );

            switch (ApplicationWorkMode)
            {
                case WorkMode.Automatic:
                    ShowCauseEffectMatrixScreen(causalRelationshipMatrix);
                    break;
                case WorkMode.SemiAutomatic:
                    ShowModelsPairScreen(unexplainedVarianceProportionMatrix, causalRelationshipMatrix);
                    break;
            }
        }

        partial void ChangeWorkModeClicked(NSButton sender)
        {
            switch (sender.Identifier)
            {
                case "Auto":
                    ApplicationWorkMode = WorkMode.Automatic;
                    break;
                case "SemiAuto":
                    ApplicationWorkMode = WorkMode.SemiAutomatic;
                    break;
            }
        }

        #endregion Xamarin.Mac Partial Methods

        #region Private Methods

        void ShowModelsPairScreen(
            UnexplainedVarianceProportionMatrix unexplainedVarianceProportionMatrix,
            CausalRelationshipMatrix causalRelationshipMatrix
        ) {
            ModelsComparingWindowController = (NSWindowController)Storyboard.InstantiateControllerWithIdentifier("ModelsPairWindowController");
            var viewController = (ModelsComparingViewController)ModelsComparingWindowController.Window.ContentViewController;
            viewController.ViewModel = new ModelsComparingViewModel(unexplainedVarianceProportionMatrix, causalRelationshipMatrix, algorithmService);

            ModelsComparingWindowController.ShowWindow(this);
        }

        void ShowCauseEffectMatrixScreen(CausalRelationshipMatrix causalRelationshipMatrix)
        {
            CauseEffectMatrixWindowController = (NSWindowController)Storyboard.InstantiateControllerWithIdentifier("CauseEffectMatrixWindowController");
            var viewController = (CauseEffectMatrixViewController)CauseEffectMatrixWindowController.Window.ContentViewController;
            viewController.ViewModel = new CauseEffectMatrixViewModel(causalRelationshipMatrix, algorithmService);

            CauseEffectMatrixWindowController.ShowWindow(this);
        }

        #endregion
    }
}
